{
  "_args": [
    [
      {
        "raw": "tabalot@^0.6.0",
        "scope": null,
        "escapedName": "tabalot",
        "name": "tabalot",
        "rawSpec": "^0.6.0",
        "spec": ">=0.6.0 <0.7.0",
        "type": "range"
      },
      "/Applications/MAMP/htdocs/markdown-viewer/node_modules/gasket"
    ]
  ],
  "_from": "tabalot@>=0.6.0 <0.7.0",
  "_id": "tabalot@0.6.1",
  "_inCache": true,
  "_location": "/tabalot",
  "_npmUser": {
    "name": "mafintosh",
    "email": "mathiasbuus@gmail.com"
  },
  "_npmVersion": "1.4.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "tabalot@^0.6.0",
    "scope": null,
    "escapedName": "tabalot",
    "name": "tabalot",
    "rawSpec": "^0.6.0",
    "spec": ">=0.6.0 <0.7.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gasket"
  ],
  "_resolved": "https://registry.npmjs.org/tabalot/-/tabalot-0.6.1.tgz",
  "_shasum": "07f9405ee59ac975238cc09bb9e0d6ac5294ff9c",
  "_shrinkwrap": null,
  "_spec": "tabalot@^0.6.0",
  "_where": "/Applications/MAMP/htdocs/markdown-viewer/node_modules/gasket",
  "bugs": {
    "url": "https://github.com/mafintosh/tabalot/issues"
  },
  "dependencies": {
    "minimist": "^0.2.0"
  },
  "description": "Tab complete all the things",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "07f9405ee59ac975238cc09bb9e0d6ac5294ff9c",
    "tarball": "https://registry.npmjs.org/tabalot/-/tabalot-0.6.1.tgz"
  },
  "homepage": "https://github.com/mafintosh/tabalot#readme",
  "maintainers": [
    {
      "name": "mafintosh",
      "email": "mathiasbuus@gmail.com"
    }
  ],
  "name": "tabalot",
  "optionalDependencies": {},
  "readme": "# tabalot\n\nTab complete all the things!\n\n\tnpm install tabalot\n\ntabalot is a node module that lets you build command line apps with\nrich built in tab completion support\n\n## Getting started\n\nLets make a sample app and link it with npm.\nWrite the example below to a file called `app.js`\n\n``` js\n#!/usr/bin/env node\nvar tab = require('tabalot');\n\ntab('hello')\n\t(function() {\n\t\tconsole.log('world');\n\t})\n\ntab.parse();\n```\n\nYou need to add a `package.json` file as well.\nThe one below will make `app.js` executable as `tabtest`\n\n``` js\n{\n\t\"name\": \"tabtest\",\n\t\"bin\": {\n\t\t\"tabtest\": \"./app.js\" // we need a bin name\n\t}\n}\n```\n\nTo try the app locally just use npm to link it\n\n\tnpm link # will add the app to your path\n\nAnd install the tab completion\n\n\ttabtest completion --save # installs the completion to your bash_completion.d folder\n\nThe app is now installed and ready to be tab completed.\nOpen a shell and try the following\n\n\ttabtest <tab>\n\ttabtest hello <enter>\n\tworld\n\nIt is as simple as that.\n\n## Completing arguments\n\nTo complete arguments we just need to pass them to tabalot\n\n``` js\ntab('hello')\n\t('--world', '-w', ['world', 'welt', 'verden'])\n\t('--debug')\n\t(function(opts) {\n\t\tconsole.log(opts);\n\t})\n```\n\nIn the above program we just added a boolean argument `--debug`\nand a `--world` argument that should complete to one of the 3 values.\n\nTry running\n\n\ttabtest <tab>\n\ttabtest hello --<tab><tab>       # prints --world --debug\n\ttabtest hello --world <tab><tab> # prints world verden welt\n\ttabtest hello --world v<tab>\n\ttabtest hello --world verden <enter>\n\nThe above program will output\n\n\t{\n\t\tworld: 'verden',\n\t\tdebug: false\n\t}\n\n## Positional arguments\n\nIf you want to complete a positional (or nameless) argument\nsimply omit the name and it will be added as an argument to call function\n\n``` js\ntab('hello')\n\t(['world', 'verden', 'welt'])\n\t(function(world, opts) {\n\t\tconsole.log(world)\n\t})\n```\n\nTry running\n\n\ttabtest <tab>\n\ttabtest hello <tab><tab> # prints world verden welt\n\ttabtest hello v<tab>\n\ttabtest hello verden <enter>\n\nThe above program will output\n\n\tverden\n\n## Dynamic completion\n\nInstead of passing the static values `['world', 'welt', 'verden']` we can\npass an async function to the completer as well\n\n``` js\ntab('hello')\n\t('--world', '-w', function(callback) {\n\t\tcallback(null, ['world', 'welt' 'verden']);\n\t})\n\t(function(opts) {\n\t\tconsole.log(opts);\n\t})\n```\n\n## Catch-all route\n\nIf you omit the command name from tab that route will be called and tab completed\nif no one else matches\n\n``` js\ntab()\n\t('--world', '-w', ['world', 'welt'])\n\t(function() {\n\t\tconsole.log('I was called by doing tabtest --world world');\n\t})\n```\n\n## Completion helpers\n\nTabalot ships with support for a couple of typical completions.\nUse these by passing @name as the completer.\n\n``` js\ntab('hello')\n\t('--file', '@file') // completes a file or directory\n\t('--dir', '@dir')   // completes a directory\n\t('--host', '@host') // completes a hostname (by looking at known_hosts)\n```\n\n# License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mafintosh/tabalot.git"
  },
  "version": "0.6.1"
}
